@page "/puestos"
@inject HttpClient client
@inject IJSRuntime js
<h3>Puestos</h3>
<div>
	<input @bind="searchValue" @bind:event="oninput"/>
	<EditForm Model="@puesto" Context="formContext" OnValidSubmit="Save" OnInvalidSubmit="Error">
		<DataAnnotationsValidator/>
		<ValidationSummary/>
		<div>
			<InputText class="form-control" @bind-Value="@puesto.Value"/>
			<ValidationMessage For="@(()=>puesto.Value)" />
		</div>
		
		<button class="btn btn-success" type="submit">Add</button>
	</EditForm>
</div>
@if(puestos == null)
{
	<div class="d-flex justify-content-center">
		<div class="spinner-border mx-2" role="status">
		</div>
		<div>Cargando puestos..</div>
	</div>
}
else if(puestos.Length == 0)
{
	<div class="d-flex justify-content-center">
		No hay puestos
	</div>
}
else
{
	<table class="table stable-striped">
		<thead>
			<tr>
				<th>Id</th>
				<th>Valor</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach(Puesto puesto in puestos)
			{
				if (!Search(@puesto))
					continue;
				<tr>
					<td>@puesto.Id</td>
					<td>@puesto.Value</td>
					<td>
						<button class="btn btn-warning" @onclick="@(()=>Edit(@puesto.Id))">Edit</button>
						<button class="btn btn-danger" @onclick="@(() => Delete(@puesto.Id))">Delete</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}
@code {
	public string searchValue { get; set; }
	Puesto puesto = new Puesto();
	Puesto[] puestos { get; set; }

	private bool Search(Puesto puesto)
	{
		if (string.IsNullOrWhiteSpace(searchValue)) return true;
		if(puesto.Value.Contains(searchValue, StringComparison.OrdinalIgnoreCase) || puesto.Id.ToString().Contains(searchValue,StringComparison.OrdinalIgnoreCase))
		{
			return true;
		}
		return false;
	}

	protected override async Task OnInitializedAsync()
	{
		puestos = await client.GetFromJsonAsync<Puesto[]>("api/puesto");
	}

	async Task Delete(int puestoId)
	{
		var p = puestos.First(x => x.Id == puestoId);
		if(await js.InvokeAsync<bool>("confirm","Quire eliminar el puesto?"))
		{
			await client.DeleteAsync($"api/puesto/{puestoId}");
			await OnInitializedAsync();
		}
	}

	private void Edit(int id)
	{
		puesto = puestos.FirstOrDefault(x => x.Id == id);
		Console.WriteLine(puesto.ToString());
	}

	async Task Save()
	{
		Console.WriteLine(puesto.Id.ToString(),puesto.Value);
		await client.PostAsJsonAsync("api/puesto",puesto);
		puesto = new Puesto();
		await OnInitializedAsync();
	}

	protected void Error()
	{
		js.InvokeVoidAsync("warning", "Formulario no valido");
	}

}
